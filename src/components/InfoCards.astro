---
// Fetch calculator data
import calculatorData from '../../public/calculatorData.json';

// Define the type for calculator data
interface CalculatorData {
  [country: string]: {
    [language: string]: {
      entries: any[];
      yGroups: string[];
      xRangeGroups: number[][];
      xRange: string[];
    }
  }
}

// Extract unique countries and languages
const countries = Object.keys(calculatorData).sort() as string[];
const languages = new Set();

// Get all unique programming languages
for (const country in calculatorData) {
  Object.keys((calculatorData as CalculatorData)[country]).forEach(lang => languages.add(lang));
}

const programmingLanguages = Array.from(languages).sort() as string[];

// Serialize calculator data for client-side use
const calculatorDataJson = JSON.stringify(calculatorData);
---

<div class="info-cards">
  <div class="card dark">
    <div class="card-text">
      <div class="select-container">
        <label for="programming-language">Programming Language</label>
        <select id="programming-language" name="programming-language">
          {programmingLanguages.map(language => (
            <option value={language}>{language}</option>
          ))}
        </select>
      </div>
      <div class="select-container">
        <label for="country">Country</label>
        <select id="country" name="country">
          {countries.map(country => (
            <option value={country}>{country}</option>
          ))}
        </select>
      </div>
    </div>
  </div>
  <div class="card light">
    <div class="card-text">
      Coding specialists from <span id="selected-country" class="highlight">Brazil</span> who use <span id="selected-language" class="highlight">C / C++</span> reported to have the following gross annual salaries (in USD including bonuses) in 2024:
    </div>
    <div id="salary-chart" class="chart-container"></div>
  </div>
</div>

<!-- Hidden element to store calculator data for client-side access -->
<div id="calculator-data" data-json={calculatorDataJson} style="display: none;"></div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const countrySelect = document.getElementById('country') as HTMLSelectElement;
    const languageSelect = document.getElementById('programming-language') as HTMLSelectElement;
    const selectedCountry = document.getElementById('selected-country');
    const selectedLanguage = document.getElementById('selected-language');
    const chartContainer = document.getElementById('salary-chart');

    // Access the calculator data from the hidden element
    let calculatorData;
    try {
      const dataElement = document.getElementById('calculator-data');
      if (dataElement && dataElement.getAttribute('data-json')) {
        calculatorData = JSON.parse(dataElement.getAttribute('data-json') || '{}');
      } else {
        console.error('Calculator data not found');
        calculatorData = {};
      }
    } catch (error) {
      console.error('Error parsing calculator data:', error);
      calculatorData = {};
    }

    // Set initial values
    if (selectedCountry && countrySelect) {
      selectedCountry.textContent = countrySelect.value;
    }

    if (selectedLanguage && languageSelect) {
      selectedLanguage.textContent = languageSelect.value;
    }

    // Function to render the salary chart
    function renderSalaryChart(country: string, language: string) {
      if (!chartContainer || !calculatorData[country] || !calculatorData[country][language]) return;

      // Clear previous chart
      chartContainer.innerHTML = '';

      const data = calculatorData[country][language];
      const entries = data.entries;
      const yGroups = data.yGroups; // Experience levels

      // Find the maximum salary value
      const maxSalary = Math.max(...entries.map(entry => entry.value));
      // Round up to the nearest 100K for a clean scale
      const roundedMaxSalary = Math.ceil(maxSalary / 100) * 100;

      // Create SVG element
      const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
      svg.setAttribute('width', '100%');
      svg.setAttribute('height', '400');
      svg.setAttribute('viewBox', '0 0 800 400');
      chartContainer.appendChild(svg);

      // Create axes
      const xAxis = document.createElementNS('http://www.w3.org/2000/svg', 'line');
      xAxis.setAttribute('x1', '50');
      xAxis.setAttribute('y1', '350');
      xAxis.setAttribute('x2', '750');
      xAxis.setAttribute('y2', '350');
      xAxis.setAttribute('stroke', '#333');
      xAxis.setAttribute('stroke-width', '2');
      svg.appendChild(xAxis);

      const yAxis = document.createElementNS('http://www.w3.org/2000/svg', 'line');
      yAxis.setAttribute('x1', '50');
      yAxis.setAttribute('y1', '50');
      yAxis.setAttribute('x2', '50');
      yAxis.setAttribute('y2', '350');
      yAxis.setAttribute('stroke', '#333');
      yAxis.setAttribute('stroke-width', '2');
      svg.appendChild(yAxis);

      // Add right y-axis
      const rightYAxis = document.createElementNS('http://www.w3.org/2000/svg', 'line');
      rightYAxis.setAttribute('x1', '750');
      rightYAxis.setAttribute('y1', '50');
      rightYAxis.setAttribute('x2', '750');
      rightYAxis.setAttribute('y2', '350');
      rightYAxis.setAttribute('stroke', '#333');
      rightYAxis.setAttribute('stroke-width', '2');
      svg.appendChild(rightYAxis);

      // Define number of labels for x-axis
      const numLabels = 5;
      const labelStep = roundedMaxSalary / (numLabels - 1);

      // Add grid lines
      // Horizontal grid lines
      yGroups.forEach((group, index) => {
        const y = 350 - ((index + 1) * (300 / yGroups.length));
        const gridLine = document.createElementNS('http://www.w3.org/2000/svg', 'line');
        gridLine.setAttribute('x1', '50');
        gridLine.setAttribute('y1', y.toString());
        gridLine.setAttribute('x2', '750');
        gridLine.setAttribute('y2', y.toString());
        gridLine.setAttribute('stroke', '#dddddd');
        gridLine.setAttribute('stroke-width', '1');
        svg.appendChild(gridLine);
      });

      // Vertical grid lines
      for (let i = 0; i < numLabels; i++) {
        const x = 50 + (i * (700 / (numLabels - 1)));
        const gridLine = document.createElementNS('http://www.w3.org/2000/svg', 'line');
        gridLine.setAttribute('x1', x.toString());
        gridLine.setAttribute('y1', '50');
        gridLine.setAttribute('x2', x.toString());
        gridLine.setAttribute('y2', '350');
        gridLine.setAttribute('stroke', '#dddddd');
        gridLine.setAttribute('stroke-width', '1');
        svg.appendChild(gridLine);
      }

      // Add x-axis labels (salary values) - dynamically calculated

      for (let i = 0; i < numLabels; i++) {
        const value = i * labelStep;
        const x = 50 + (i * (700 / (numLabels - 1)));
        const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');
        text.setAttribute('x', x.toString());
        text.setAttribute('y', '380');
        text.setAttribute('text-anchor', 'middle');
        text.setAttribute('font-size', '14');
        text.textContent = value === 0 ? '0' : `${value}K`;
        svg.appendChild(text);
      }

      // Add y-axis labels on the right side (experience levels)
      yGroups.forEach((group, index) => {
        const y = 350 - ((index + 1) * (300 / yGroups.length));
        const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');
        text.setAttribute('x', '760');
        text.setAttribute('y', y.toString());
        text.setAttribute('text-anchor', 'start');
        text.setAttribute('font-size', '14');
        text.setAttribute('dominant-baseline', 'middle');
        text.textContent = group;
        svg.appendChild(text);
      });

      // Group entries by category (experience level)
      const entriesByCategory = {};
      yGroups.forEach(group => {
        entriesByCategory[group] = [];
      });

      entries.forEach(entry => {
        if (entriesByCategory[entry.category]) {
          entriesByCategory[entry.category].push(entry);
        }
      });

      // Sort entries within each category by value
      Object.keys(entriesByCategory).forEach(category => {
        entriesByCategory[category].sort((a, b) => a.value - b.value);
      });

      // Plot data points and connect with lines
      Object.keys(entriesByCategory).forEach(category => {
        const categoryEntries = entriesByCategory[category];
        const yIndex = yGroups.indexOf(category);
        const y = 350 - ((yIndex + 1) * (300 / yGroups.length));

        // Create a path for the line
        if (categoryEntries.length > 1) {
          const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
          let pathData = 'M';

          categoryEntries.forEach((entry, index) => {
            const x = 50 + (entry.value / roundedMaxSalary * 700);
            pathData += `${x},${y} `;
            if (index < categoryEntries.length - 1) {
              pathData += 'L';
            }
          });

          path.setAttribute('d', pathData);
          path.setAttribute('stroke', '#6b57ff');
          path.setAttribute('stroke-width', '2');
          path.setAttribute('fill', 'none');
          svg.appendChild(path);
        }

        // Add dots on top of the line
        categoryEntries.forEach(entry => {
          const value = entry.value; // Salary in thousands

          // Calculate position
          const x = 50 + (value / roundedMaxSalary * 700); // Scale dynamically

          // Create dot
          const dot = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
          dot.setAttribute('cx', x.toString());
          dot.setAttribute('cy', y.toString());
          dot.setAttribute('r', '5');
          dot.setAttribute('fill', '#6b57ff');
          dot.setAttribute('data-experience', category);
          dot.setAttribute('data-salary', value.toString());
          dot.setAttribute('data-country', country);
          dot.setAttribute('data-language', language);

          // Add basic tooltip for accessibility
          const title = document.createElementNS('http://www.w3.org/2000/svg', 'title');
          title.textContent = `${category}, $${value}K`;
          dot.appendChild(title);

          // Add hover event listeners
          dot.addEventListener('mouseenter', (e) => {
            const target = e.target as SVGCircleElement;
            const experience = target.getAttribute('data-experience');
            const salary = target.getAttribute('data-salary');
            const country = target.getAttribute('data-country');
            const language = target.getAttribute('data-language');

            // Create tooltip
            const tooltip = document.createElement('div');
            tooltip.className = 'salary-tooltip';
            tooltip.innerHTML = `
              <div class="tooltip-header">${experience}</div>
              <div class="tooltip-content">
                <div><strong>Salary:</strong> $${salary}K</div>
                <div><strong>Country:</strong> ${country}</div>
                <div><strong>Language:</strong> ${language}</div>
              </div>
            `;

            // Position tooltip near the dot
            const svgRect = svg.getBoundingClientRect();
            const dotRect = target.getBoundingClientRect();

            tooltip.style.left = `${dotRect.left - svgRect.left + 10}px`;
            tooltip.style.top = `${dotRect.top - svgRect.top - 10}px`;

            // Add tooltip to chart container
            chartContainer.appendChild(tooltip);
          });

          dot.addEventListener('mouseleave', () => {
            // Remove tooltip when mouse leaves
            const tooltip = chartContainer.querySelector('.salary-tooltip');
            if (tooltip) {
              tooltip.remove();
            }
          });

          svg.appendChild(dot);
        });
      });
    }

    // Initial render
    if (countrySelect && languageSelect) {
      renderSalaryChart(countrySelect.value, languageSelect.value);
    }

    // Update when selections change
    countrySelect?.addEventListener('change', () => {
      if (selectedCountry) {
        selectedCountry.textContent = countrySelect.value;
      }
      if (languageSelect) {
        renderSalaryChart(countrySelect.value, languageSelect.value);
      }
    });

    languageSelect?.addEventListener('change', () => {
      if (selectedLanguage) {
        selectedLanguage.textContent = languageSelect.value;
      }
      if (countrySelect) {
        renderSalaryChart(countrySelect.value, languageSelect.value);
      }
    });
  });
</script>

<style>
  .info-cards {
    display: flex;
    gap: 3rem;
    margin-top: -1rem;
    width: 100%;
  }

  .card {
    padding: 1.5rem;
    border-radius: 8px;
    display: flex;
    flex-direction: column;
  }

  .card.dark {
    background-color: #19191c;
    flex: 1;
  }

  .card.light {
    background-color: white;
    flex: 2.5;
  }

  .card-text {
    font-size: 2rem;
    line-height: 1.5;
    margin-bottom: 1.5rem;
  }

  .dark .card-text {
    color: white;
  }

  .light .card-text {
    color: black;
  }

  .select-container {
    margin-bottom: 1rem;
  }

  label {
    display: block;
    margin-bottom: 0.5rem;
  }

  select {
    width: 100%;
    padding: 0.5rem;
    border-radius: 4px;
    background-color: #2a2a2d;
    color: white;
    border: 1px solid #3a3a3d;
    font-size: 1.4rem;
  }

  .highlight {
    color: #6b57ff;
    font-weight: 500;
  }

  .chart-container {
    width: 100%;
    height: 400px;
    background-color: white;
    border-radius: 8px;
    overflow: hidden;
  }

  /* SVG styles */
  svg {
    font-family: sans-serif;
  }

  svg text {
    fill: #333;
  }

  svg circle:hover {
    fill: #4a3bcc;
    r: 7;
    transition: all 0.2s ease;
    cursor: pointer;
  }

  /* Tooltip styles */
  .salary-tooltip {
    position: absolute;
    background-color: white;
    border: 1px solid #ddd;
    border-radius: 4px;
    padding: 0;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
    font-size: 14px;
    z-index: 100;
    pointer-events: none;
    min-width: 180px;
  }

  .tooltip-header {
    background-color: #6b57ff;
    color: white;
    padding: 6px 10px;
    font-weight: bold;
    border-radius: 4px 4px 0 0;
  }

  .tooltip-content {
    padding: 8px 10px;
  }

  .tooltip-content div {
    margin-bottom: 4px;
  }

  .tooltip-content div:last-child {
    margin-bottom: 0;
  }
</style>
